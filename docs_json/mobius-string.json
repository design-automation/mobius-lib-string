{
	"id": 0,
	"name": "mobius-string",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 74,
			"name": "\"_export\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-string/src/typescript/_export.ts",
			"sources": [
				{
					"fileName": "_export.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"analyse\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-string/src/typescript/analyse.ts",
			"comment": {
				"shortText": "Functions for ..."
			},
			"children": [
				{
					"id": 6,
					"name": "endsWith",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 7,
							"name": "endsWith",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a string ends with a specified end string.",
								"returns": "True if str ends with search_str, false otherwise.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nresult = str.Eval.endsWith(string,\"ge\")<br/></code>\n<br/>Expected value of result is true.\n"
							},
							"parameters": [
								{
									"id": 8,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 9,
									"name": "end_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "End string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "analyse.ts",
							"line": 51,
							"character": 24
						}
					]
				},
				{
					"id": 10,
					"name": "includes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 11,
							"name": "includes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a string contains a specified search string.",
								"returns": "True if str contains search_str, false otherwise.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nincl = str.Eval.includes(string,\"an\")<br/></code>\n<br/>Expected value of incl is true.\n"
							},
							"parameters": [
								{
									"id": 12,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to search."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Sub-string to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "analyse.ts",
							"line": 69,
							"character": 24
						}
					]
				},
				{
					"id": 21,
					"name": "indexOf",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 22,
							"name": "indexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the position index of the first occurance of the specified search string within a string.\nIf the specified sub-string cannot be found, then returns -1.",
								"returns": "Number that represents first position of search_str in str.\n\n<h3>Example:</h3>\n<code>string = \"Banana\"<br/>\nsearch = str.Eval.indexOf(string,\"a\")<br/></code>\n<br/>Expected value of search is 1.\n"
							},
							"parameters": [
								{
									"id": 23,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 24,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Sub-string to search for. (Case sensitive)"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "analyse.ts",
							"line": 124,
							"character": 23
						}
					]
				},
				{
					"id": 25,
					"name": "lastIndexOf",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 26,
							"name": "lastIndexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the position index of the last occurance of the specified search string within a string.\nIf the specified sub-string cannot be found, then returns -1.\n(The string is searched starting from its end)",
								"returns": "Number that represents last position of search_str in str.\n\n<h3>Example:</h3>\n<code>string = \"Banana\"<br/>\nsearch = str.Eval.lastIndexOf(string,\"a\")<br/></code>\n<br/>Expected value of search is 5.\n"
							},
							"parameters": [
								{
									"id": 27,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 28,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Sub-string to search for. (Case sensitive)"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "analyse.ts",
							"line": 144,
							"character": 27
						}
					]
				},
				{
					"id": 14,
					"name": "len",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 15,
							"name": "len",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of characters in a string.",
								"returns": "Length of string.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nlength = str.Eval.len(string)<br/></code>\n<br/>Expected value of length is 6.\n"
							},
							"parameters": [
								{
									"id": 16,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to find length of."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "analyse.ts",
							"line": 86,
							"character": 19
						}
					]
				},
				{
					"id": 29,
					"name": "localeCompare",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 30,
							"name": "localeCompare",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares two strings in the current locale (language setting).\n(In general, the order is as follows: digits (0-9), upper-case (A-Z), then lower-case (a-z))",
								"returns": "Number indicating whether str comes before or after comp_str in sort order. (-1: before, 0: equal, 1: after)\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\ncomp_str = \"Apple\"<br/>\ncomp = str.Eval.localeCompare(string,comp_str)<br/></code>\n<br/>Expected value of comp is 1.\n"
							},
							"parameters": [
								{
									"id": 31,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 32,
									"name": "comp_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to compare against."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "analyse.ts",
							"line": 164,
							"character": 29
						}
					]
				},
				{
					"id": 17,
					"name": "search",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 18,
							"name": "search",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the position index of the first occurance of the specified search string within a string.\nIf the specified sub-string cannot be found, then returns -1.\n(This function uses regular expressions, if searching using a string, use str.Eval.indexOf)",
								"returns": "Number that represents first position of search_str in str.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nsearch = str.Eval.search(string,\"e\")<br/></code>\n<br/>Expected value of search is 5.\n"
							},
							"parameters": [
								{
									"id": 19,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 20,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Regular expression to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "analyse.ts",
							"line": 105,
							"character": 22
						}
					]
				},
				{
					"id": 2,
					"name": "startsWith",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3,
							"name": "startsWith",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a string starts with the specified start string.",
								"returns": "True if str starts with search_str, false otherwise.\n\n<h3>Example:</h3>\n<code>\nstring = \"Orange\"<br/>\nresult = str.Eval.startsWith(string,\"Or\")<br/>\n</code>\n<br/>Expected value of result is true.\n"
							},
							"parameters": [
								{
									"id": 4,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5,
									"name": "start_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Start tring."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "analyse.ts",
							"line": 33,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						6,
						10,
						21,
						25,
						14,
						29,
						17,
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "analyse.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 33,
			"name": "\"convert\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-string/src/typescript/convert.ts",
			"comment": {
				"shortText": "Functions for converting strings to other types."
			},
			"children": [
				{
					"id": 34,
					"name": "toFloat",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 35,
							"name": "toFloat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a string to a floating point number.\nWill return NaN is the string cannot be converted.\nhttps://www.w3schools.com/jsref/jsref_parsefloat.asp",
								"returns": "Floating point number.\n\n"
							},
							"parameters": [
								{
									"id": 36,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to convert."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 37,
									"name": "defaultZero",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "boolean, if true then zero will be returned\nif the string cannot be converted to a number."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "convert.ts",
							"line": 20,
							"character": 23
						}
					]
				},
				{
					"id": 42,
					"name": "toFloats",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 43,
							"name": "toFloats",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts an array of strings to floating point numbers.\nhttps://www.w3schools.com/jsref/jsref_parsefloat.asp",
								"returns": "An array of floating point numbers.\n\n"
							},
							"parameters": [
								{
									"id": 44,
									"name": "strs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 45,
									"name": "defaultZero",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "boolean, if true then any value that cannot be converted to a number\nwill be set to zero."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "convert.ts",
							"line": 55,
							"character": 24
						}
					]
				},
				{
					"id": 38,
					"name": "toInt",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 39,
							"name": "toInt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a string to an integer number.\nWill return NaN is the string cannot be converted.\nhttps://www.w3schools.com/jsref/jsref_parseint.asp",
								"returns": "Integer number.\n\n"
							},
							"parameters": [
								{
									"id": 40,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to convert."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 41,
									"name": "defaultZero",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "boolean, if true then zero will be returned\nif the string cannot be converted to a number."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "convert.ts",
							"line": 38,
							"character": 21
						}
					]
				},
				{
					"id": 46,
					"name": "toInts",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 47,
							"name": "toInts",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts an array of strings to integer numbers.\nhttps://www.w3schools.com/jsref/jsref_parseint.asp",
								"returns": "An array of integer numbers.\n\n"
							},
							"parameters": [
								{
									"id": 48,
									"name": "strs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 49,
									"name": "defaultZero",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "boolean, if true then any value that cannot be converted to a number\nwill be set to zero."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "convert.ts",
							"line": 70,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						34,
						42,
						38,
						46
					]
				}
			],
			"sources": [
				{
					"fileName": "convert.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 50,
			"name": "\"modify\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/Cesium Functions/mobius-string/src/typescript/modify.ts",
			"comment": {
				"shortText": "Functions for ..."
			},
			"children": [
				{
					"id": 51,
					"name": "replace",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 52,
							"name": "replace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Searches for and replaces the specified search string in a string.\nThe search string can also be a regular expression.",
								"returns": "New string with replaced characters.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nnewString = str.Modify.Replace(string,\"O\",\"Ar\")<br/></code>\n<br/>Expected value of newString is \"Arrange\".\n"
							},
							"parameters": [
								{
									"id": 53,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 54,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Sub-string or regular expression to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 55,
									"name": "new_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Replacement string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify.ts",
							"line": 32,
							"character": 23
						}
					]
				},
				{
					"id": 56,
					"name": "split",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 57,
							"name": "split",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Splits a string into a list of substrings using a specified separator string.",
								"returns": "List of substrings.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nsplit = str.Modify.split(string,\"a\")<br/></code>\n<br/>Expected value of split is [\"Or\",\"nge\"].\n"
							},
							"parameters": [
								{
									"id": 58,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 59,
									"name": "separator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String of characters used to split string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "modify.ts",
							"line": 51,
							"character": 21
						}
					]
				},
				{
					"id": 60,
					"name": "substring",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 61,
							"name": "substring",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Extracts characters in a string between two specified indices and returns it as a new string.\nStart index is inclusive and end index is exclusive.",
								"returns": "New string with extracted characters.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nsubstring = str.Modify.substring(string,1,4)<br/></code>\n<br/>Expected value of substring is \"ran\".\n"
							},
							"parameters": [
								{
									"id": 62,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 63,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index to start extracting characters (inclusive)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 64,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index to stop extracting characters (exclusive)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify.ts",
							"line": 71,
							"character": 25
						}
					]
				},
				{
					"id": 65,
					"name": "toLowercase",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 66,
							"name": "toLowercase",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a string to lowercase letters.",
								"returns": "New string with lowercase characters.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nnewstring = str.Modify.toLowercase(string)<br/></code>\n<br/>Expected value of newstring is \"orange\".\n"
							},
							"parameters": [
								{
									"id": 67,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify.ts",
							"line": 87,
							"character": 27
						}
					]
				},
				{
					"id": 71,
					"name": "toString",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 72,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a value into a string.",
								"returns": "New string.\n\n<h3>Example:</h3>\n<code>value = [500,800]<br/>\nnewstring = str.Modify.toUppercase(value)<br/></code>\n<br/>Expected value of newstring is \"500,800\".\n"
							},
							"parameters": [
								{
									"id": 73,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Value to convert into string."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify.ts",
							"line": 119,
							"character": 24
						}
					]
				},
				{
					"id": 68,
					"name": "toUppercase",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 69,
							"name": "toUppercase",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a string to uppercase letters.",
								"returns": "New string with uppercase characters.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nnewstring = str.Modify.toUppercase(string)<br/></code>\n<br/>Expected value of newstring is \"ORANGE\".\n"
							},
							"parameters": [
								{
									"id": 70,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify.ts",
							"line": 103,
							"character": 27
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						51,
						56,
						60,
						65,
						71,
						68
					]
				}
			],
			"sources": [
				{
					"fileName": "modify.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				74,
				1,
				33,
				50
			]
		}
	]
}