{
	"id": 0,
	"name": "mobius-string",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 97,
			"name": "\"_export\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/design-automation/mobius-string/src/typescript/_export.ts",
			"sources": [
				{
					"fileName": "_export.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"calc\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/design-automation/mobius-string/src/typescript/calc.ts",
			"comment": {
				"shortText": "Functions for ..."
			},
			"children": [
				{
					"id": 6,
					"name": "endsWith",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 7,
							"name": "endsWith",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a string ends with a specified end string.",
								"returns": "True if str ends with search_str, false otherwise.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Orange\"\nresult = str.Eval.endsWith(string,\"ge\")\n\nExpected value of result is true.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 8,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 9,
									"name": "end_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "End string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 47,
							"character": 24
						}
					]
				},
				{
					"id": 10,
					"name": "includes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 11,
							"name": "includes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a string contains a specified search string.",
								"returns": "True if str contains search_str, false otherwise.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Orange\"\nincl = str.Eval.includes(string,\"an\")\n\nExpected value of incl is true.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 12,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to search."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Sub-string to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 64,
							"character": 24
						}
					]
				},
				{
					"id": 21,
					"name": "indexOf",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 22,
							"name": "indexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the position index of the first occurance of the specified search string within a string.\nIf the specified sub-string cannot be found, then returns -1.",
								"returns": "Number that represents first position of search_str in str.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Banana\"\nsearch = str.Eval.indexOf(string,\"a\")\n\nExpected value of search is 1.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 23,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 24,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Sub-string to search for. (Case sensitive)"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 116,
							"character": 23
						}
					]
				},
				{
					"id": 25,
					"name": "lastIndexOf",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 26,
							"name": "lastIndexOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the position index of the last occurance of the specified search string within a string.\nIf the specified sub-string cannot be found, then returns -1.\n(The string is searched starting from its end)",
								"returns": "Number that represents last position of search_str in str.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Banana\"\nsearch = str.Eval.lastIndexOf(string,\"a\")\n\nExpected value of search is 5.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 27,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 28,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Sub-string to search for. (Case sensitive)"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 135,
							"character": 27
						}
					]
				},
				{
					"id": 14,
					"name": "len",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 15,
							"name": "len",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of characters in a string.",
								"returns": "Length of string.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Orange\"\nlength = str.Eval.len(string)\n\nExpected value of length is 6.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 16,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to find length of."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 80,
							"character": 19
						}
					]
				},
				{
					"id": 29,
					"name": "localeCompare",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 30,
							"name": "localeCompare",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares two strings in the current locale (language setting).\n(In general, the order is as follows: digits (0-9), upper-case (A-Z), then lower-case (a-z))",
								"returns": "Number indicating whether str comes before or after comp_str in sort order. (-1: before, 0: equal, 1: after)",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Orange\"\ncomp_str = \"Apple\"\ncomp = str.Eval.localeCompare(string,comp_str)\n\nExpected value of comp is 1.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 31,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 32,
									"name": "comp_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to compare against."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 154,
							"character": 29
						}
					]
				},
				{
					"id": 17,
					"name": "search",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 18,
							"name": "search",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the position index of the first occurance of the specified search string within a string.\nIf the specified sub-string cannot be found, then returns -1.\n(This function uses regular expressions, if searching using a string, use str.Eval.indexOf)",
								"returns": "Number that represents first position of search_str in str.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Orange\"\nsearch = str.Eval.search(string,\"e\")\n\nExpected value of search is 5.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 19,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 20,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Regular expression to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 98,
							"character": 22
						}
					]
				},
				{
					"id": 2,
					"name": "startsWith",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3,
							"name": "startsWith",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a string starts with the specified start string.",
								"returns": "True if str starts with search_str, false otherwise.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Orange\"\nresult = str.Eval.startsWith(string,\"Or\")\n\nExpected value of result is true.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 4,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5,
									"name": "start_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Start tring."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 30,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						6,
						10,
						21,
						25,
						14,
						29,
						17,
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "calc.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 33,
			"name": "\"create\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/design-automation/mobius-string/src/typescript/create.ts",
			"comment": {
				"shortText": "Functions for ..."
			},
			"children": [
				{
					"id": 64,
					"name": "byLowCase",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 65,
							"name": "byLowCase",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a string to lowercase letters.",
								"returns": "New string with lowercase characters.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Orange\"\nnewstring = str.Modify.toLowercase(string)\n\nExpected value of newstring is \"orange\".\n"
									}
								]
							},
							"parameters": [
								{
									"id": 66,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 156,
							"character": 25
						}
					]
				},
				{
					"id": 50,
					"name": "byReplace",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 51,
							"name": "byReplace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Searches for and replaces the specified search string in a string.\nThe search string can also be a regular expression.",
								"returns": "New string with replaced characters.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Orange\"\nnewString = str.Modify.Replace(string,\"O\",\"Ar\")\n\nExpected value of newString is \"Arrange\".\n"
									}
								]
							},
							"parameters": [
								{
									"id": 52,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 53,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Sub-string or regular expression to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 54,
									"name": "new_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Replacement string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 104,
							"character": 25
						}
					]
				},
				{
					"id": 55,
					"name": "bySplit",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 56,
							"name": "bySplit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Splits a string into a list of substrings using a specified separator string.",
								"returns": "List of substrings.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Orange\"\nsplit = str.Modify.split(string,\"a\")\n\nExpected value of split is [\"Or\",\"nge\"].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 57,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 58,
									"name": "separator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String of characters used to split string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 122,
							"character": 23
						}
					]
				},
				{
					"id": 59,
					"name": "bySubstring",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 60,
							"name": "bySubstring",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Extracts characters in a string between two specified indices and returns it as a new string.\nStart index is inclusive and end index is exclusive.",
								"returns": "New string with extracted characters.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Orange\"\nsubstring = str.Modify.substring(string,1,4)\n\nExpected value of substring is \"ran\".\n"
									}
								]
							},
							"parameters": [
								{
									"id": 61,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 62,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index to start extracting characters (inclusive)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 63,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index to stop extracting characters (exclusive)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 141,
							"character": 27
						}
					]
				},
				{
					"id": 67,
					"name": "byUppCase",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 68,
							"name": "byUppCase",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a string to uppercase letters.",
								"returns": "New string with uppercase characters.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Orange\"\nnewstring = str.Modify.toUppercase(string)\n\nExpected value of newstring is \"ORANGE\".\n"
									}
								]
							},
							"parameters": [
								{
									"id": 69,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 171,
							"character": 25
						}
					]
				},
				{
					"id": 34,
					"name": "toFloat",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 35,
							"name": "toFloat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a string to a floating point number.",
								"text": "See [https://www.w3schools.com/jsref/jsref_parsefloat.asp](https://www.w3schools.com/jsref/jsref_parsefloat.asp)\n",
								"returns": "Floating point number, or input string.\n\n"
							},
							"parameters": [
								{
									"id": 36,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to convert."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 37,
									"name": "defaultZero",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "boolean, controlling what to do when the value cannot be converted.\nIf defaultZero is true, then the value will default to 0.0.\nIf defaultZero is false, then the value will remain unchanged (as a string)."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 21,
							"character": 23
						}
					]
				},
				{
					"id": 42,
					"name": "toFloats",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 43,
							"name": "toFloats",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts an array of strings to floating point numbers.",
								"returns": "An array of floating point numbers, or strings.",
								"tags": [
									{
										"tag": "example",
										"text": "\ndata = [\"10.12\",\"20.34\",\"30.56\", \"some_text\"]\nresult1 = str.convert.toInts(data, true)\n//result1 will be [10, 20, 30, 0]\nresult2 = str.convert.toInts(data, true)\n//result2 will be [10.12, 20.34, 30.56, \"some_text\"]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 44,
									"name": "strs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 45,
									"name": "defaultZero",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "boolean, controlling what to do when a value cannot be converted.\nIf defaultZero is true, then the value will default to 0.\nIf defaultZero is false, then the value will remain unchanged (as a string)."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 64,
							"character": 24
						}
					]
				},
				{
					"id": 38,
					"name": "toInt",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 39,
							"name": "toInt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a string to an integer number.",
								"text": "See [https://www.w3schools.com/jsref/jsref_parseint.asp](https://www.w3schools.com/jsref/jsref_parseint.asp)\n",
								"returns": "Integer number, or input string.\n\n"
							},
							"parameters": [
								{
									"id": 40,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to convert."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 41,
									"name": "defaultZero",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "boolean, controlling what to do when a value cannot be converted.\nIf defaultZero is true, then the value will default to 0.\nIf defaultZero is false, then the value will remain unchanged (as a string)."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 41,
							"character": 21
						}
					]
				},
				{
					"id": 46,
					"name": "toInts",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 47,
							"name": "toInts",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts an array of strings to integer numbers.",
								"returns": "An array of integer numbers, or strings.",
								"tags": [
									{
										"tag": "example",
										"text": "\ndata = [\"10\",\"20\",\"30\", \"some_text\"]\nresult1 = str.convert.toInts(data, true)\n//result1 will be [10, 20, 30, 0]\nresult2 = str.convert.toInts(data, true)\n//result2 will be [10, 20, 30, \"some_text\"]\n"
									}
								]
							},
							"parameters": [
								{
									"id": 48,
									"name": "strs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 49,
									"name": "defaultZero",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "boolean, controlling what to do when a value cannot be converted.\nIf defaultZero is true, then the value will default to 0.\nIf defaultZero is false, then the value will remain unchanged (as a string)."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 84,
							"character": 22
						}
					]
				},
				{
					"id": 70,
					"name": "toString",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 71,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a value into a string.",
								"returns": "New string.",
								"tags": [
									{
										"tag": "example",
										"text": "value = [500,800]\nnewstring = str.Modify.toUppercase(value)\n\nExpected value of newstring is \"500,800\".\n"
									}
								]
							},
							"parameters": [
								{
									"id": 72,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Value to convert into string."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "create.ts",
							"line": 186,
							"character": 24
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						64,
						50,
						55,
						59,
						67,
						34,
						42,
						38,
						46,
						70
					]
				}
			],
			"sources": [
				{
					"fileName": "create.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 73,
			"name": "\"modify-old\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/design-automation/mobius-string/src/typescript/modify-old.ts",
			"comment": {
				"shortText": "Functions for ..."
			},
			"children": [
				{
					"id": 74,
					"name": "replace",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 75,
							"name": "replace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Searches for and replaces the specified search string in a string.\nThe search string can also be a regular expression.",
								"returns": "New string with replaced characters.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Orange\"\nnewString = str.Modify.Replace(string,\"O\",\"Ar\")\n\nExpected value of newString is \"Arrange\".\n"
									}
								]
							},
							"parameters": [
								{
									"id": 76,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 77,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Sub-string or regular expression to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 78,
									"name": "new_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Replacement string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify-old.ts",
							"line": 31,
							"character": 23
						}
					]
				},
				{
					"id": 79,
					"name": "split",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 80,
							"name": "split",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Splits a string into a list of substrings using a specified separator string.",
								"returns": "List of substrings.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Orange\"\nsplit = str.Modify.split(string,\"a\")\n\nExpected value of split is [\"Or\",\"nge\"].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 81,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 82,
									"name": "separator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String of characters used to split string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "modify-old.ts",
							"line": 49,
							"character": 21
						}
					]
				},
				{
					"id": 83,
					"name": "substring",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 84,
							"name": "substring",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Extracts characters in a string between two specified indices and returns it as a new string.\nStart index is inclusive and end index is exclusive.",
								"returns": "New string with extracted characters.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Orange\"\nsubstring = str.Modify.substring(string,1,4)\n\nExpected value of substring is \"ran\".\n"
									}
								]
							},
							"parameters": [
								{
									"id": 85,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 86,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index to start extracting characters (inclusive)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 87,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index to stop extracting characters (exclusive)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify-old.ts",
							"line": 68,
							"character": 25
						}
					]
				},
				{
					"id": 88,
					"name": "toLowercase",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 89,
							"name": "toLowercase",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a string to lowercase letters.",
								"returns": "New string with lowercase characters.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Orange\"\nnewstring = str.Modify.toLowercase(string)\n\nExpected value of newstring is \"orange\".\n"
									}
								]
							},
							"parameters": [
								{
									"id": 90,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify-old.ts",
							"line": 83,
							"character": 27
						}
					]
				},
				{
					"id": 94,
					"name": "toString",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 95,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a value into a string.",
								"returns": "New string.",
								"tags": [
									{
										"tag": "example",
										"text": "value = [500,800]\nnewstring = str.Modify.toUppercase(value)\n\nExpected value of newstring is \"500,800\".\n"
									}
								]
							},
							"parameters": [
								{
									"id": 96,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Value to convert into string."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify-old.ts",
							"line": 113,
							"character": 24
						}
					]
				},
				{
					"id": 91,
					"name": "toUppercase",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 92,
							"name": "toUppercase",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a string to uppercase letters.",
								"returns": "New string with uppercase characters.",
								"tags": [
									{
										"tag": "example",
										"text": "string = \"Orange\"\nnewstring = str.Modify.toUppercase(string)\n\nExpected value of newstring is \"ORANGE\".\n"
									}
								]
							},
							"parameters": [
								{
									"id": 93,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "modify-old.ts",
							"line": 98,
							"character": 27
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						74,
						79,
						83,
						88,
						94,
						91
					]
				}
			],
			"sources": [
				{
					"fileName": "modify-old.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				97,
				1,
				33,
				73
			]
		}
	]
}